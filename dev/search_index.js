var documenterSearchIndex = {"docs":
[{"location":"getting_started/#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"getting_started/#The-CliffordNumber-data-type","page":"Getting started","title":"The CliffordNumber data type","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"A CliffordNumber{Q,T,L} is a Clifford number associated with a QuadraticForm Q, a backing Real or Complex type T, and a length L. The length parameter is redundant, and in many cases, it may be omitted without consequence.","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"!!! warning Although the length may be omitted in many cases, it's important to remember that a CliffordNumber{Q,T} is not a concrete type. This is important when creating an Array or other container of CliffordNumber elements.","category":"page"},{"location":"getting_started/#Internals","page":"Getting started","title":"Internals","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"A CliffordNumber{Q,T,L} is backed by an NTuple{L,T} where T<:Union{Real,Complex}. The coefficients, however, are not indexed by grade as is done canonically in most resources.","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"!!! danger Read that again: CliffordNumber indexing is not done by grade.","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Instead, the coefficients are arranged in a binary counted fashion, which allows for better SIMD optimization.","category":"page"},{"location":"getting_started/#Constructing-a-Clifford-number","page":"Getting started","title":"Constructing a Clifford number","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"The inner constructor for CliffordNumber is CliffordNumber{Cl,T,L}(x), where x is any type that can be converted to an NTuple{L,T}. However, in many cases, the type parameters are redundant, particularly L. For this reason, more constructors exist.","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"In general, one can use a Vararg constructor to directly input the values.","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia> CliffordNumber{APS}(1, 2, 3, 4, 5, 6, 7, 8)\nCliffordNumber{APS,Int}(1, 2, 3, 4, 5, 6, 7, 8)","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Clifford numbers may also be constructed from real numbers, generating a scalar-valued CliffordNumber:","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia> CliffordNumber{APS}(1)\nCliffordNumber{APS,Int}(1, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"When constructing a CliffordNumber from complex numbers, the type parameters become more important. By default, it is assumed that the element type of a CliffordNumber is a Real. If a complex CliffordNumber is desired, this must be stated explicitly.","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia> CliffordNumber{APS}(1 + im)\nCliffordNumber{APS,Int}(1, 0, 0, 0, 0, 0, 0, 1)\n\njulia> CliffordNumber{APS,Complex}(1 + im)\nCliffordNumber{APS,Complex{Int}}(1 + im, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"getting_started/#Quadratic-forms","page":"Getting started","title":"Quadratic forms","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Before getting started with Clifford numbers, it's important to understand how the dimensionality of the space is stored. Unlike with other data types such as StaticArrays.jl's SVector, the total number of dimensions in the space is not all the information that needs to be stored. Each basis vector of the space may square to a positive number, negative number, or zero, defining the quadratic form associated with the Clifford algebra. This information needs to be tracked as a type parameter for CliffordNumber.","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"To handle this, the QuadraticForm{P,Q,R} type is used to store information about the quadratic form. In this type, P represents","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"!!! note By convention, the QuadraticForm type is not instantiated when used as a type parameter for CliffordNumber instances.","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"CliffordNumbers.jl provides the following aliases for common algebras:","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"| Algebra    | Alias                  | Note                                           | | VGA{D}   | QuadraticForm{D,0,0} | Vanilla/vector geometric algebra               | | PGA{D}   | QuadraticForm{D,0,1} | Projective geometric algebra                   | | APS      | QuadraticForm{3,0,0} | Algebra of physical space                      | | STA      | QuadraticForm{1,3,0} | Spacetime algebra. By default, uses a -+++     | |            |                        | convention to distinguish it from a conformal  | |            |                        | geometric algebra.                             |","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Currently, an alias for conformal geometric algebras (CGA{D}) does not exist, as it requires some type parameter trickery that hasn't been figured out yet.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = CliffordNumbers","category":"page"},{"location":"#CliffordNumbers","page":"Home","title":"CliffordNumbers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CliffordNumbers.jl is a package that provides fully static multivectors (Clifford numbers) in arbitrary dimensions and metrics. While in many cases, sparse representations of multivectors are more efficient, for spaces of low dimension, dense static representations may provide a performance and convenience advantage.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CliffordNumbers]","category":"page"},{"location":"#CliffordNumbers.BaseNumber","page":"Home","title":"CliffordNumbers.BaseNumber","text":"CliffordNumbers.BaseNumber\n\nUnion of subtypes of Number provided in the Julia Base module: Real and Complex.\n\n\n\n\n\n","category":"type"},{"location":"#CliffordNumbers.APS","page":"Home","title":"CliffordNumbers.APS","text":"APS\n\nThe algebra of physical space, Cl(3,0,0). An alias for QuadraticForm{3,0,0}.\n\n\n\n\n\n","category":"type"},{"location":"#CliffordNumbers.BitIndex","page":"Home","title":"CliffordNumbers.BitIndex","text":"CliffordNumbers.BitIndex{Cl<:QuadraticForm}\n\nAn index corresponding to a signed basis element of a Clifford algebra.\n\nThe basis elements of a Clifford number may be described with a binary word with length equal to  the dimension of the space. The nth bit corresponds to whether the basis element e_n is used to  construct the element with the given index.\n\nAs an example, in the algebra of physical space, the element e₁ can be represented with the binary number 0b001, e₂ with 0b010, and e₃ with 0b100. Elements of higher grades can be accessed by using the xor operation: for example, the basis bivector e₁e₃ can be represented with xor(0b001, 0b100) == 0b101. The scalar element is always represented with 0.\n\nThe sign of the index is stored. A negative sign corresponds to an odd permutation of the basis elements, and \n\nThe QuadraticForm is a tag that marks the Clifford algebra associated with the index. All operations on such BitIndex only depend on the value modulo elements(Cl). If a generic index is desired, QuadraticForm may be used as the tag.\n\n\n\n\n\n","category":"type"},{"location":"#CliffordNumbers.BitIndices","page":"Home","title":"CliffordNumbers.BitIndices","text":"BitIndices{Cl<:QuadraticForm}\n\nStores the range of valid BitIndices for the Clifford algebra with quadratic form Cl.\n\n\n\n\n\n","category":"type"},{"location":"#CliffordNumbers.CliffordNumber","page":"Home","title":"CliffordNumbers.CliffordNumber","text":"CliffordNumber{Q,T,L}\n\nAn element of a Clifford algebra, often referred to as a multivector, with quadratic form Cl,  element type T, and length L (which depends entirely on Cl).\n\nThe coefficients are ordered by taking advantage of the natural binary structure of the basis. The grade of an element is given by the Hamming weight of its index. For the algebra of physical space, the order is: 1, e₁, e₂, e₁₂, e₃, e₁₃, e₂₃, e₁₂₃ = i. This order allows for more aggressive SIMD optimization when calculating the geometric product.\n\n\n\n\n\n","category":"type"},{"location":"#CliffordNumbers.PGA","page":"Home","title":"CliffordNumbers.PGA","text":"PGA{D} (alias for `QuadraticForm{D,0,1}`)\n\nAlias for projective geometric algebras, which have positive-definite signatures except in one dimension, which is degenerate (squares to zero).\n\n\n\n\n\n","category":"type"},{"location":"#CliffordNumbers.QuadraticForm","page":"Home","title":"CliffordNumbers.QuadraticForm","text":"CliffordNumbers.QuadratricForm\n\nRepresents a quadratric with P dimensions which square to +1, Q dimensions which square to -1, and R dimensions which square to 0, in that order.\n\nBy convention, this type is used as a tag, and is never instantiated.\n\n\n\n\n\n","category":"type"},{"location":"#CliffordNumbers.STAminus","page":"Home","title":"CliffordNumbers.STAminus","text":"STA\n\nSpacetime algebra with a mostly negative signature (particle physicist's convention), Cl(1,3,0). An alias for QuadraticForm{1,3,0}.\n\nThe negative signature is used by default to distinguish this algebra from conformal geometric algebras, which use a mostly positive signature by convention.\n\n\n\n\n\n","category":"type"},{"location":"#CliffordNumbers.VGA","page":"Home","title":"CliffordNumbers.VGA","text":"VGA{D} (alias for `QuadraticForm{D,0,0}`)\n\nAlias for vector/vanilla geometric algebras, which have positive-definite signatures.\n\n\n\n\n\n","category":"type"},{"location":"#Base.:*-Union{Tuple{Cl}, Tuple{BitIndex{Cl}, BitIndex{Cl}}} where Cl","page":"Home","title":"Base.:*","text":"*(i1::BitIndex{Cl}, i2::BitIndex{Cl}) -> BitIndex{Cl}\n\nReturns the basis element that results from the multiplication of basis elements i1 and i2.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:*-Union{Tuple{Q}, Tuple{CliffordNumber{Q}, CliffordNumber{Q}}} where Q","page":"Home","title":"Base.:*","text":"*(m1::CliffordNumber{Q}, m2::CliffordNumber{Q}) -> CliffordNumber{Q}\n\nCalculates the geometric product between multivectors/Clifford numbers m1 and m2 which share the quadratic form Q.\n\n\n\n\n\n","category":"method"},{"location":"#Base.sign-Union{Tuple{R}, Tuple{Q}, Tuple{P}, Tuple{Type{QuadraticForm{P, Q, R}}, Integer}} where {P, Q, R}","page":"Home","title":"Base.sign","text":"sign(::Type{QuadraticForm{P,Q,R}}, i::Integer) -> Int8\n\nGets the sign associated with dimension i of a quadratric form.\n\n\n\n\n\n","category":"method"},{"location":"#CliffordNumbers.:⋆-Tuple{CliffordNumber}","page":"Home","title":"CliffordNumbers.:⋆","text":"⋆(m::CliffordNumber) -> CliffordNumber\n\nCalculates the Hodge dual of m, equivalent to multiplying m by its corresponding pseudoscalar.\n\n\n\n\n\n","category":"method"},{"location":"#CliffordNumbers.dot-Union{Tuple{Q}, Tuple{CliffordNumber{Q}, CliffordNumber{Q}}} where Q","page":"Home","title":"CliffordNumbers.dot","text":"dot(m1::CliffordNumber{Q}, m2::CliffordNumber{Q}) -> Number\nm1 · m2 -> CliffordNumber{Q}\n\nCalculates the dot (inner) product of two Clifford numbers with quadratic form Cl. The result is a Real or Complex number. This can be converted back to a CliffordNumber.\n\n\n\n\n\n","category":"method"},{"location":"#CliffordNumbers.elementwise_product-Union{Tuple{Q}, Tuple{CliffordNumber{Q}, CliffordNumber{Q}, Integer, Integer}} where Q","page":"Home","title":"CliffordNumbers.elementwise_product","text":"CliffordAlgebra.elementwise_product(\n    m1::CliffordNumber{Q},\n    m2::CliffordNumber{Q},\n    i1::Integer,\n    i2::Integer\n)\n\nCalculates the geometric product between element i1 of Clifford number m1 and element i2 of Clifford number m2.\n\n\n\n\n\n","category":"method"},{"location":"#CliffordNumbers.hamming_weight-Tuple{Integer}","page":"Home","title":"CliffordNumbers.hamming_weight","text":"CliffordNumbers.hamming_weight(i::Integer) -> Int\n\nCalculates the Hamming weight of an integer. This is used to determine the grade of a component of a StaticMultivector.\n\n\n\n\n\n","category":"method"},{"location":"#CliffordNumbers.isevil-Tuple{Integer}","page":"Home","title":"CliffordNumbers.isevil","text":"CliffordNumbers.isevil(i::Integer) -> Bool\n\nDetermines whether a number is evil, meaning that its Hamming weight (sum of its binary digits) is even.\n\n\n\n\n\n","category":"method"},{"location":"#CliffordNumbers.sign_of_mult-Tuple{Unsigned, Unsigned}","page":"Home","title":"CliffordNumbers.sign_of_mult","text":"CliffordNumbers.sign_of_mult([Cl::Type{QuadraticForm{P,Q,R}}], a::Integer, b::Integer)\n\nCalculates the sign associated with multiplying basis elements indexed with bit indices supplied as integers. The sign reverses whenever the order of a and b are reverse, provided they are not the same.\n\n\n\n\n\n","category":"method"},{"location":"#CliffordNumbers.subscript_string-Tuple{Number}","page":"Home","title":"CliffordNumbers.subscript_string","text":"CliffordNumbers.subscript_string(x::Number) -> String\n\nProduces a string representation of a number in subscript format.\n\n\n\n\n\n","category":"method"},{"location":"#CliffordNumbers.wedge-Union{Tuple{Q}, Tuple{CliffordNumber{Q}, CliffordNumber{Q}}} where Q","page":"Home","title":"CliffordNumbers.wedge","text":"wedge(m1::CliffordNumber{Q}, m2::CliffordNumber{Q}) -> CliffordNumber{Q}\n\nCalculates the wedge (outer) product of two Clifford numbers with quadratic form Q. The result is another CliffordNumber{Q}.\n\n\n\n\n\n","category":"method"}]
}
